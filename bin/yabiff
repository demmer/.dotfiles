#!/usr/bin/wish
# yabiff.tcl
# Author: Bart Robinson <lomew@cs.utah.edu>
# Translated to Tcl: Anand Ranganathan <anand@cs.utah.edu>
# Reworked and added ssh connection support by Mike Demmer <mike@demmer.nu>

set debug 0
proc dprint {s} {
    global debug
    if {$debug} { puts $s }
}

## XXX this should be in resources but I don't know how
set width 60
set delay 5
set fg black
set bg grey87
if {$tcl_platform(os) == "Darwin"} {
    set font "Arial"
} else {
    set font "6x10"
}
set default_geometry "=300x70+10+10"
set usebar 1
set beep 1

if {! [info exists geometry]} {
    set geometry $default_geometry
}    

array set argvars {
    -geometry		geometry
    -geom		geometry
    -delay		delay
    -bar		usebar
    -beep		beep
}

proc usage {} {
    global argvars
    puts -nonewline "usage: yabiff "
    foreach arg [array names argvars] {
	puts -nonewline "\[ $arg val \] "
    }
    puts "host1:spool1\[,spool2,...\] host2:spool1\[,...\]"
    exit 1
}

set rest {}
for {set i 0} {$i < [llength $argv]} {incr i} {
    set arg [lindex $argv $i]
    if {! [info exists argvars($arg)]} {
	lappend rest $arg
	continue
    }

    set val [lindex $argv [incr i]]
    set $argvars($arg) $val
}

set max_spool_count -1

foreach arg $rest {
    set L [split $arg :]
    if {[llength $L] != 2} {
	puts "Error: host spec '$arg' malformed"
	usage
    }
    set host [lindex $L 0]
    set spools [split [lindex $L 1] ,]

    set spoolcount 0
    foreach spool $spools {
	if {$spool == "@" || $spool == "inbox" || $spool == "@F"} {
	    continue
	}
	incr spoolcount
    }
    lappend hostspools $host $spools $spoolcount
    
    if {$spoolcount > $max_spool_count} {
	set max_spool_count $spoolcount
    }
}

if [info exists env(USER)] {
    set user $env(USER);
} elseif [info exists env(LOGNAME)] {
    set user $env(LOGNAME);
} else {
    puts stderr "I don't believe we have met.";
    exit -1;
}

if {$hostspools == {}} {
    # no host specified, look for a spoolfile
    if [info exists env(MAIL)] {
	if [file exists $env(MAIL)] {
	    set spoolfile $env(MAIL);
	}
    } elseif [file exists "/usr/spool/mail/$user"] {
	set spoolfile "/usr/spool/mail/$user";
    } elseif [file exists "/usr/mail/$user"] {
	set spoolfile "/usr/mail/$user";
    } elseif [file exists "/var/mail/$user"] {
	set spoolfile "var/mail/$user";
    } elseif [file exists "/var/spool/mail/$user"] {
	set spoolfile "/var/spool/mail/$user";
    }

    if [expr ! [info exists spoolfile]] {
	puts stderr "no spool";
	exit -1;
    }
}

wm title . YaBiff;
wm geometry . $geometry

set bar_width 2

set labelfont [font create -size 6]

if {$usebar} {
    text .bar -width $bar_width -background $bg -bd 1 -font $labelfont
    pack .bar -side left -expand no -fill y
}

set g [split $geometry {=x+}]
set y [lindex $g 2]


if {$hostspools == {}} {
    text $text -wrap none -font $font -background $bg -bd 1 -height 0
    pack $text -expand yes -fill both -side top 
} else {
    foreach {host spools spoolcount} $hostspools {
	set frame ".frame-$host"
	frame $frame -background $bg -bd 0 -height 0
	pack $frame -expand yes -fill both -side top

	if {$spools != "@" && $spools != "inbox"} {
	    set sideframe ".sideframe-$host"
	    frame $sideframe -background $bg -bd 0 -width 1
	    pack $sideframe -in $frame -side left -expand no -fill y
	}

	# This is a shitty hack b/c I don't understand how to make
	# pack do what I want it to
	while {$spoolcount < $max_spool_count} {
	    lappend spools "fake$spoolcount"
	    incr spoolcount
	}

	foreach spool $spools {
	    if {$spool == "@F"} continue;
	    if {$spool == "@" || $spool == "inbox"} {
		set text ".text-$host-@"
		text $text -wrap none -font $font -background $bg -bd 1 -height 0
		pack $text -in $frame -expand yes -fill both -side right 
	    } else {
		set label ".label-$host-$spool"
		incr spoolcount
		label $label -height 1 -width 1 -background $bg -bd 0 -font $labelfont
		pack $label -in $sideframe -expand no -fill none -pady 1
	    }
	}

    }
}

proc flash {} {
    global beep;
    global flash;
    global bg;
    global fg;
    if {$beep} {
	bell -displayof .;
    }
    if {$flash} {
	.text configure -foreground $bg -background $fg;
	after 200 .text configure -foreground $fg -background $bg;
    }
}

set ctime 0
proc checktime {} {
    global ctime
    global spoolfile
    if [file exists $spoolfile] {
	set newctime [file mtime $spoolfile]
	if {$newctime > $ctime} {
	    set ctime $newctime
	    return 1
	}
    }
    return 0
}

set nlines_total 0
proc refresh {host lines} {
    global fg bg beep usebar
    global nlines_total

    if {$host == ""} {
	set text .text
    } else {
	set text ".text-$host-@"
    }

    $text configure -state normal
    $text delete 0.0 end

    set nlines 0
    set first 1
    # don't put a newline after the last one
    foreach line $lines {
	dprint "$host: $line"
	if [regexp {yabiff count (\S+) (\d+)} $line match spool count] {
	    set label ".label-$host-$spool"
	    if {$count > 0} {
		$label configure -bg $fg
	    } else {
		$label configure -bg $bg
	    }
	    continue
	}
	
	incr nlines

	if {$first} {
	    $text insert 0.0 $line
	    set first 0
	} else {
	    $text insert 0.0 "$line\n"
	}
    }

    # adjust the global line count to tell if there's any new messages
    # in any window
    upvar \#0 nlines_$host nlines_host
    if {![info exists nlines_host]} {
	set nlines_host 0
    }
    set old_nlines_total $nlines_total
    set nlines_total [expr $nlines_total - $nlines_host + $nlines]
    set nlines_host $nlines
    
    if {$beep && ($nlines_total > $old_nlines_total)} {
	bell -displayof .;
    }
    
    if {$usebar} {
	if {$nlines_total > 0} {
	    .bar configure -bg $fg
	} else {
	    .bar configure -bg $bg
	}
    }

    # make sure the bottom of the textbox is displayed
    $text yview moveto 1.0
    
    $text configure -state disabled
}

proc spoolfile_loop {} {
    global spoolfile
    global update_id
    global delay

    if [info exists update_id] {
	after cancel update_id
    }
    set update_id [after [expr $delay * 1000] update_spoolfile]

    set handle [open "|frm -s new -s unread" RDONLY];
    set lines {}
    while {! [eof $handle]} {
	gets $handle line
	lappend lines $line
    }
    catch {close $handle};
    
    refresh "" $lines
}

proc remote_loop {} {
    global hostspools delay

    set delay_arg "-delay $delay"

    foreach {host spools spoolcount} $hostspools {
	set spool_arg "-spools [join $spools ,]"
	set cmd ""
	if {$host != [info hostname]} {
	    append cmd "ssh -v $host "
	}
	append cmd "yabiff-remote $delay_arg $spool_arg < /dev/null"
	dprint "running $cmd"
	set ssh [open "|$cmd" r]
	fconfigure $ssh -blocking false -buffering none
	fileevent $ssh readable "update_remote $host $ssh"
    }
}

proc update_remote {host ssh} {
    set lines {}
    
    # something should be readable here
    set ret [gets $ssh line]
    dprint "update_remote $host $ret"

    if {$ret == -1} {
	refresh $host {"(error: ssh tunnel died)"}
	close $ssh
	return
    }
    
    # if it's a ping, just loop and block again
    if {$line == "ping"} {
	dprint "ping from $host"
	return
    }
    
    # otherwise, read until a line with a .
    while {$line != "."} {
	if {$line != ""} {
	    set lines [linsert $lines 0 $line]
	}
	
	gets $ssh line

	if {$line == ""} {
	    after 100
	}
    }
    
    # output what we got
    refresh $host $lines
}



if [info exists spoolfile] {
    spoolfile_loop
} else {
    remote_loop
}
