#!/usr/local/bin/tclsh8.3
# yabiff-server
# Author: Mike Demmer <mike@demmer.nu>

set debug 0

proc dprint {s} {
    global debug
    if {$debug} { puts $s }
}

#
# Arguments
#
set delay 5
set checkfetch 0
set spools {}

array set argvars {
    -delay		delay
    -spools		spools
}

for {set i 0} {$i < [llength $argv]} {incr i} {
    set arg [lindex $argv $i]
    if {$arg == "-debug"} {
        set debug 1
        continue
    }
    if {! [info exists argvars($arg)]} {
	puts "Error: unknown arg $arg"
	exit 1
    }
    
    set val [lindex $argv [incr i]]
    set $argvars($arg) $val
}

set delay [expr $delay * 1000]

if [info exists env(USER)] {
    set user $env(USER);
} elseif [info exists env(LOGNAME)] {
    set user $env(LOGNAME);
} else {
    puts stderr "I don't believe we have met.";
    exit -1;
}

foreach spool [split $spools ,] {
    if {$spool == "@F"} {
	set checkfetch 1
	continue
    } elseif {$spool == "@"} {
	if [info exists env(MAIL)] {
	    if [file exists $env(MAIL)] {
		set spoolfile $env(MAIL);
	    }
	} elseif [file exists "/var/mail/$user"] {
	    set spoolfile "/var/mail/$user";
	} elseif [file exists "/var/spool/mail/$user"] {
	    set spoolfile "/var/spool/mail/$user";
	}

	if {! [info exists spoolfile]} {
	    puts stderr "no inbox spool";
	    exit -1;
	}
    } else {
	set spoolfile "$env(HOME)/Mail/$spool"
    }
    
    if {! [file readable $spoolfile]} {
	puts stderr "$spoolfile unreadable"
	exit -1;
    }
    lappend newspools $spool $spoolfile

    set atime($spoolfile) 0
    set ctime($spoolfile) 0
    set mtime($spoolfile) 0
}
set spools $newspools

proc checktime {spoolfile} {
    global mtime ctime
    dprint "checktime $spoolfile $mtime($spoolfile) $ctime($spoolfile)"
    if {![file exists $spoolfile]} {
	return 0
    }
    
    file stat $spoolfile stat
    
    if {$stat(mtime) > $mtime($spoolfile) || \
	$stat(ctime) > $ctime($spoolfile)} {
	dprint "checktime changed: $stat(mtime) != $mtime($spoolfile) || $stat(ctime) != $ctime($spoolfile)"
	return 1
    }
    
    return 0
}

proc scan {spool spoolfile} {
    set from ""
    set subject ""
    set status ""

    set nlines 0

    # stat the file before 
    file stat $spoolfile stat

    set fd [open $spoolfile r]
    while {! [eof $fd]} {
	
	# read until we get a mbox message boundary
	while {! [eof $fd]} {
	    set l [gets $fd]
	    
	    if [regexp \
		    {^From (\S+)\s+.+\d\d:\d\d:\d\d \d\d\d\d$} \
		    $l match f] {
		dprint "From $f"
		set from $f
		set subject ""
		set status ""

		break
	    }

	}

	# now parse through headers until we get a blank line
	while {! [eof $fd]} {
	    set l [gets $fd]
	    if [regexp {^$} $l] {
		break
	    }
		
	    regexp {^From: (.*)$} $l match from
	    regexp {^Subject: (.*)$} $l match subject
	    regexp {^Status: (\w*)$} $l match status
	}

	dprint "end of headers: $from $subject $status"

	# output what we got
	if {($from != "") && ($status != "RO") && ($status != "OR")} {

	    # try to pretty up the from address
	    regexp {([^<\[]*)[<\]](.*)[>\]]} $from match from fromaddr
	    set from [string trim $from {\" }]
	    if {$from == ""} {
		set from $fromaddr
	    }
	    regexp {=\?[^\?]+\?[^\?]+\?([^\?]+)\?=} $from match from

	    if [regexp {^(\w+), (.+)} $from match last first] {
		set from "$first $last"
	    }
	    
	    set subject [string tolower $subject]
	    if {$spool == "@" || $spool == "inbox"} {
		puts "$from >> $subject"
	    }
	    incr nlines

	    # clean house
 	    set from ""
 	    set subject ""
 	    set status ""
	}

	# and loop to the next message
    }

    close $fd

    # update the times -- if nothing has changed, then set the mtime
    # and atime equal, otherwise force mtime to be bigger than atime
    global atime ctime mtime
    
    if {$nlines == 0} {
	set atime($spoolfile) $stat(mtime)
	set ctime($spoolfile) $stat(ctime)
	set mtime($spoolfile) $stat(mtime)
    } else {
	set atime($spoolfile) $stat(atime)
	set ctime($spoolfile) $stat(ctime)
	set mtime($spoolfile) $stat(mtime)
	
	if {$stat(mtime) <= $stat(atime)} {
	    set mtime($spoolfile) [expr $stat(atime) + 1]
	}
    }
    
    dprint "setting times (nlines $nlines) $atime($spoolfile) $ctime($spoolfile) $mtime($spoolfile)"
    
    file atime $spoolfile $atime($spoolfile)
    file mtime $spoolfile $mtime($spoolfile)

    # since our setting of atime / mtime changed the ctime (and we
    # want to get the real latest one), call stat once more to update
    # our internal ctime stat
    file stat $spoolfile stat
    set ctime($spoolfile) $stat(ctime)
    
    if {$spool != "@" && $spool != "inbox"} {
	puts "yabiff count $spool $nlines"
    }
}

proc checkfetch {} {
    set pid ""
    if [catch {
	set fd [open "~/.fetchmail.pid"]
	set pid [gets $fd]
	set pid [lindex $pid 0]; # file contains: pid delay
	close $fd
    } err] {
	puts "yabiff >> (fetchmail pid unreadable)"
	return 1
    }

    if {! [file exists /proc/$pid]} {
	puts "yabiff >> (fetchmail pid $pid died)"
	return 1
    }

    return 0
}

while {1} {
    set doscan 0
    if {$checkfetch} {
	set doscan [checkfetch]
    }
    
    foreach {spool spoolfile} $spools {
	if {[checktime $spoolfile]} {
	    set doscan 1
	}
    }

    if {$doscan} {
        foreach {spool spoolfile} $spools {
            scan $spool $spoolfile
        }
	puts "."
    } else {
	puts "ping"
    }
    
    flush stdout
    after $delay
}
