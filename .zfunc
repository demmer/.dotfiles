##
## FILE:  .zfunc
## DESC:  zsh function definitions
##

function lc {
	unset dict_names
	unset dict_dirs 
}

function l {
	i=$dict_names[(Ie)$1*]
	if [ $i -eq 0 ]; then
		less $1
	else
		less $dict_dirs[$i]
	fi
}

function la {
	foreach i ($*)
		dict_names=($dict_names $i)
		dict_dirs=($dict_dirs $PWD/$i)
	end
}

# setenv emulation
#   usage: setenv <var> <value>
function setenv {
	export $1=$2
}

# the miraculous un- function; and nice to your hashtable to boot!
#   usage: un <function-or-alias>
function un {
	unalias $*
	unfunction $*
	rehash
}

# remove emacs backups
#   usage: rmbak [dir ...]
function rmbak {
	local dirs="$*"
	if [ "$dirs" = "" ]; then
		dirs=.
	fi
	/bin/find $dirs \( -name '.*~' -o -name '*~' \) \
		-print -exec /bin/rm {} \;
}

# set DISPLAY variable to X server name
#   usage:  sd <dpy_name>
function sd {
	export DISPLAY="$1:0"
}

# set TERM variable to terminal type
#   usage:  st <term_type>
function st {
	export TERM=$1
}

# set lines and columns
#   usage: slc <lines> <columns>
function slc {
	export LINES=$1 COLUMNS=$2
}

# chpwd - runs every time the current working directory changes
function chpwd {
	cwd=`pwd`
        while read pattern mask
        do
                eval "if [[ '$cwd' == $pattern ]]; then
                        umask $mask
                        break
                fi"
        done < ~/.umask
}

function notify () {
        eval $argv
        xmessage -timeout 5 notify: $HOSTNAME completed \'$argv\' &
}

function rgrep-internal () {
	 files=$2
	 pattern=$1
	 echo find . -name $files -exec grep $pattern {} /dev/null \;
	 find . -name $files -exec grep $pattern {} /dev/null \;
}

function pushd-ssh () {
    pushd
    "ssh" $*
    popd
}

# from jordansissel
function bytes() {
  if [ $# -gt 0 ]; then
    while [ $# -gt 0 ]; do
      echo -n "${1}B = "
      byteconv "$1"
      shift
    done
  else
    while read a; do
      byteconv "$a"
    done
  fi
}

function byteconv() {
  a=$1
  ORDER=BKMGTPE
  while [ $(echo "$a >= 1024" | bc) -eq 1 -a $#ORDER -gt 1 ]; do
    a=$(echo "scale=2; $a / 1024" | bc)
    ORDER="${ORDER#?}"
  done
  echo "${a}$(echo "$ORDER" | cut -b1)"
}
