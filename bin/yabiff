#!/usr/bin/wish
# yabiff.tcl
# Author: Bart Robinson <lomew@cs.utah.edu>
# Translated to Tcl: Anand Ranganathan <anand@cs.utah.edu>
# Reworked and added ssh connection support by Mike Demmer <mike@demmer.nu>

## XXX this should be in resources but I don't know how
set lines 5;
set width 60;
set beep 0;
set flash 1;
set delay 5;
set delay [expr $delay * 1000];
set fg black;
set bg grey87;
set font "6x13"
set geometry "+10+10"
set remotehost ""

for {set i 0} {$i < [llength $argv]} {incr i} {
    set arg [lindex $argv $i]
    switch -- $arg {
	"-geometry" - "-geom" {
	    incr i
	    set geometry [lindex $argv $i]
	}
	"-host" {
	    incr i
	    set remotehost [lindex $argv $i]
	}
	default {
	    puts stderr "unknown argument $arg"
	    exit 1
	}
    }
}


if [info exists env(USER)] {
    set user $env(USER);
} elseif [info exists env(LOGNAME)] {
    set user $env(LOGNAME);
} else {
    puts stderr "I don't believe we have met.";
    exit -1;
}

if {$remotehost == ""} {
    # no host specified, look for a spoolfile
    if [info exists env(MAIL)] {
	if [file exists $env(MAIL)] {
	    set spoolfile $env(MAIL);
	}
    } elseif [file exists "/usr/spool/mail/$user"] {
	set spoolfile "/usr/spool/mail/$user";
    } elseif [file exists "/usr/mail/$user"] {
	set spoolfile "/usr/mail/$user";
    } elseif [file exists "/var/mail/$user"] {
	set spoolfile "var/mail/$user";
    } elseif [file exists "/var/spool/mail/$user"] {
	set spoolfile "/var/spool/mail/$user";
    }

    if [expr ! [info exists spoolfile]] {
	puts stderr "no spool";
	exit -1;
    }
}

wm title . YaBiff;
wm geometry . $geometry

set bar_width 2

text .bar -wrap none -setgrid 1 -font $font \
	-width $bar_width \
	-height $lines -background $bg -bd 1 

text .text -wrap none -setgrid 1 -font $font \
	-width [expr $width - $bar_width] \
	-height $lines -background $bg -bd 1

frame .box -bd 0

pack .box -anchor n -fill both
pack .bar -side left -expand no -fill y
pack .text -expand yes -fill both

proc flash {} {
    global beep;
    global flash;
    global bg;
    global fg;
    if {$beep} {
	bell -displayof .;
    }
    if {$flash} {
	.text configure -foreground $bg -background $fg;
	after 200 .text configure -foreground $fg -background $bg;
    }
}

set ctime 0
proc checktime {} {
    global ctime
    global spoolfile
    if [file exists $spoolfile] {
	set newctime [file mtime $spoolfile]
	if {$newctime > $ctime} {
	    set ctime $newctime
	    return 1
	}
    }
    return 0
}

proc refresh {lines} {
    global fg bg

    .text configure -state normal
    .text delete 0.0 end

    foreach line $lines {
	.text insert 0.0 "$line\n";
    }

    if {[llength $lines] > 0} {
	bell -displayof .;
	.bar configure -bg $fg
    } else {
	.bar configure -bg $bg
    }
    
    .text configure -state disabled
}

proc spoolfile_loop {} {
    global spoolfile
    global update_id
    global delay

    if [info exists update_id] {
	after cancel update_id
    }
    after $delay update_spoolfile

    set handle [open "|frm -s new -s unread" RDONLY];
    set lines {}
    while {! [eof $handle]} {
	gets $handle line
	lappend lines $line
    }
    catch {close $handle};
    
    refresh $lines
}

proc remote_loop {} {
    global ssh remotehost
    set ssh [open "|ssh -v $remotehost yabiff-server < /dev/null" r]
    fconfigure $ssh -blocking false -buffering none
    fileevent $ssh readable update_remote
}

proc update_remote {} {
    global ssh

    set lines {}
    
    # something should be readable here
    set ret [gets $ssh line]
    if {$ret == -1} {
	refresh {"(error: ssh tunnel died)"}
	close $ssh
	return
    }
    
    # if it's a ping, just loop and block again
    if {$line == "ping"} {
	return
    }
    
    # otherwise, read until a line with a .
    while {$line != "."} {
	if {$line != ""} {
	    set lines [linsert $lines 0 $line]
	}
	
	gets $ssh line

	if {$line == ""} {
	    after 100
	}
    }
    
    # output what we got
    refresh $lines
}

proc prettytime {} {
    set localtime [clock format [clock seconds] -format %I:%M%p];
    regsub -- {^0} $localtime {} localtime
    return [string tolower $localtime]
}


if [info exists spoolfile] {
    spoolfile_loop
} else {
    remote_loop
}
